
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/vortex.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_vortex.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_vortex.py:


Visualizing optical flow in napari
==================================

Adapted from the scikit-image gallery [1]_.

In napari, we can show the flowing vortex as an additional dimension in the
image, visible by moving the slider.

.. tags:: visualization-advanced, layers

.. [1] https://scikit-image.org/docs/stable/auto_examples/registration/plot_opticalflow.html

.. GENERATED FROM PYTHON SOURCE LINES 14-20

.. code-block:: Python

    import numpy as np
    from skimage.data import vortex
    from skimage.registration import optical_flow_ilk

    import napari


.. GENERATED FROM PYTHON SOURCE LINES 21-22

First, we load the vortex image as a 3D array. (time, row, column)

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: Python


    vortex_im = np.asarray(vortex())


.. GENERATED FROM PYTHON SOURCE LINES 26-29

We compute the optical flow using scikit-image. (Note: as of
scikit-image 0.21, there seems to be a transposition of the image in
the output, which we account for later.)

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: Python


    u, v = optical_flow_ilk(vortex_im[0], vortex_im[1], radius=15)


.. GENERATED FROM PYTHON SOURCE LINES 33-34

Compute the flow magnitude, for visualization.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: Python


    magnitude = np.sqrt(u ** 2 + v ** 2)


.. GENERATED FROM PYTHON SOURCE LINES 38-41

We subsample the vector field to display it — it's too
messy otherwise! And we transpose the rows/columns axes to match the
current scikit-image output.

.. GENERATED FROM PYTHON SOURCE LINES 41-54

.. code-block:: Python


    nvec = 21
    nr, nc = magnitude.shape
    step = max(nr//nvec, nc//nvec)
    offset = step // 2
    usub = u[offset::step, offset::step]
    vsub = v[offset::step, offset::step]

    vectors_field = np.transpose(  # transpose required — skimage bug?
            np.stack([usub, vsub], axis=-1),
            (1, 0, 2),
            )


.. GENERATED FROM PYTHON SOURCE LINES 55-57

Finally, we create a viewer, and add the vortex frames, the flow
magnitude, and the vector field.

.. GENERATED FROM PYTHON SOURCE LINES 57-71

.. code-block:: Python


    viewer, vortex_layer = napari.imshow(vortex_im)
    mag_layer = viewer.add_image(magnitude, colormap='magma', opacity=0.3)
    flow_layer = viewer.add_vectors(
            vectors_field,
            name='optical flow',
            scale=[step, step],
            translate=[offset, offset],
            edge_width=0.3,
            length=0.3,
            )

    if __name__ == '__main__':
        napari.run()


.. _sphx_glr_download_gallery_vortex.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: vortex.ipynb <vortex.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: vortex.py <vortex.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
